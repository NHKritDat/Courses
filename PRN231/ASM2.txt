Tạo Blank solution đặt tên format: SP25_NET1720_RPR231_ASM2_SE170330_NguyenHoangDat

Tạo Project:
- Console App: SCBS.GrpcClient
- Grpc: SCBS.GrpcServices
- Class Library:
	- SCBS.Repositories
	- SCBS.Services

Xóa Class1

Config start up client + grpc services

Project Reference:
api -> service -> repo

Open in Terminal Repo:
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.5
dotnet add package Microsoft.Extensions.Configuration --version 8.0.0
dotnet add package Microsoft.Extensions.Configuration.Json --version 8.0.0

Open in Terminal Client:
dotnet add package Grpc.Net.Client
dotnet add package Google.Protobuf
dotnet add package Grpc.Tools

--------------------------------Set up Repo-------------------------------------------------
Project -> EF Core -> Reverse Engineer
Add... -> Add Database Connection
Server Name: Krit-Dat\NHKRITDAT_MSSQL
SQL Server Authentication
Username: sa
Password: 123456
Encrypt: False
tick Trust Server Certificate
Select correct db

Select Connect
Select Table
Use DataAnnotation
Include connection string

Tạo folder DBContext
Chuyển Context vào folder trên
Đổi namespace DBContext
using Models

Comment OnConfiguring
Bỏ đoạn này vào:
public static string GetConnectionString(string connectionStringName)
{
    var config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json")
        .Build();

    string connectionString = config.GetConnectionString(connectionStringName);
    return connectionString;
}

protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

Tạo folder Base
Tạo GenericRepository
Xóa bên trong và bỏ đoạn này vào:
public class GenericRepository<T> where T : class
{
    protected Sp25CosmeticsDBContext _context;

    public GenericRepository()
    {
        _context ??= new Sp25CosmeticsDBContext();
    }

    public GenericRepository(Sp25CosmeticsDBContext context)
    {
        _context = context;
    }

    public async Task<List<T>> GetAllAsync()
    {
        return await _context.Set<T>().ToListAsync();
    }

    public async Task<int> CreateAsync(T entity)
    {
        _context.Add(entity);
        return await _context.SaveChangesAsync();
    }

    public async Task<int> UpdateAsync(T entity)
    {
        var tracker = _context.Attach(entity);
        tracker.State = EntityState.Modified;
        return await _context.SaveChangesAsync();
    }

    public async Task<bool> RemoveAsync(T entity)
    {
        _context.Remove(entity);
        await _context.SaveChangesAsync();
        return true;
    }

    public async Task<T> GetByIdAsync(int id)
    {
        var entity = await _context.Set<T>().FindAsync(id);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }

    public async Task<T> GetByIdAsync(string code)
    {
        var entity = await _context.Set<T>().FindAsync(code);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }

    public async Task<T> GetByIdAsync(Guid code)
    {
        var entity = await _context.Set<T>().FindAsync(code);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }
}

Tạo các class repo [Model]Repository : GenericRepository<Model> thêm public
Constructor rỗng: 
        public ModelRepository() { }

Hàm login:
        public async Task<Model> Get[Model](string [field], string password) => await _context.Model.FirstOrDefaultAsync(u => u.Field == [field đăng nhập bằng cái gì] && u.Password == password [&& u.IsActive đề có yêu cầu active hay không]);

Chức năng chính, kiểm tra id là kiểu gì, SubModel tên là gì:
        public async Task<List<Model>> GetAllAsync() => await _context.Models.Include(item => item.SubModel).ToListAsync();
        public async Task<Model> GetByIdAsync(type id)
        {
            var entity = await _context.Models.Include(item => item.SubModel).FirstOrDefaultAsync(item => item.Id == id);
            if (entity != null)
            {
                _context.Entry(entity).State = EntityState.Detached;
            }
            return entity;
        }
        public async Task<List<Model>> Search(type? search1, type? search2, type? search3) => await _context.Models
                .Include(item => item.SubModel)
                .Where(item =>
                (string.IsNullOrEmpty(search1) || item.search1.Contains(search1))
                            && (string.IsNullOrEmpty(search2) || item.search2.Contains(search2))
                            && (string.IsNullOrEmpty(search3) || item.search3.Contains(search3))
                )
                .ToListAsync();

------------------------------------------------Services----------------------------------------------
Tạo các class [Model]Service và xóa nội dung bên trong
    public interface IModelService
    {
    }
    public class ModelService : IModelService
    {
        private readonly ModelRepository _modelRepository;
        public ModelService() => _modelRepository = new ModelRepository();
    }

Hàm login:
        public async Task<Model> Authenticate(type field, string password) => await _modelRepository.GetModel(field, password);
Cho lên interface

Hàm chính:
        public async Task<int> CreateAsync(Model item) => await _modelRepository.CreateAsync(item);

        public async Task<bool> RemoveAsync(type id)
        {
            var item = await _modelRepository.GetByIdAsync(id);
            if (item != null)
            {
                return await _modelRepository.RemoveAsync(item);
            }
            return false;
        }

        public async Task<List<Model>> GetAllAsync() => await _modelRepository.GetAllAsync();

        public async Task<Model> GetByIdAsync(type id) => await _modelRepository.GetByIdAsync(id);

        public async Task<List<Model>> Search() => await _modelRepository.Search();

        public async Task<int> UpdateAsync(Model item) => await _modelRepository.UpdateAsync(item);
Cho lên interface đủ 6 hàm, điều chỉnh Search giống repo

Hàm phụ:
        public async Task<List<Model>> GetAllAsync() => await _modelRepository.GetAllAsync();

        public async Task<Model> GetByIdAsync(type id) => await _modelRepository.GetByIdAsync(id);
Cho lên interface đủ 2 hàm

--------------------------------------gRPC---------------------------------------------------------
Tạo ModelGrpcService trong Services

Programs:
builder.Services.AddScoped<IScheduleService, ScheduleService>();
app.MapGrpcService<ScheduleGrpcService>();

Tạo schedule.proto
message ActionResult {
	int32 status = 1;
	string message = 2;
	ItemList data = 3;
}

message IdRequest {
	string id = 1;
}

message EmptyRequest {
}

message ItemList {
	repeated Item items = 1;
}

message Item {
	string id = 1;
	string userId = 2;
	string workDate = 3;
	string status = 4;
	string createdAt = 5;
	string updatedAt = 6;
	string title = 7;
	string description = 8;
	string location = 9;
	string notes = 10;
}

service ScheduleGrpc{
	rpc GetAllAsync (EmptyRequest) returns (ItemList);

	rpc GetByIdAsync (IdRequest) returns (Item);

	rpc CreateAsync (Item) returns (ActionResult);

	rpc UpdateAsync (Item) returns (ActionResult);
  
	rpc RemoveAsync (IdRequest) returns (ActionResult);
}

Project:
    <Protobuf Include="Protos\schedule.proto" GrpcServices="Server" />

Build Ctrl+Shift+B

public class ScheduleGrpcService : ScheduleGrpc.ScheduleGrpcBase
{
    private readonly IScheduleService _scheduleService;
    public ScheduleGrpcService(IScheduleService scheduleService)
    {
        _scheduleService = scheduleService;
    }
    public override async Task<Item> GetByIdAsync(IdRequest request, ServerCallContext context)
    {
        var schedule = await _scheduleService.GetByIdAsync(Guid.Parse(request.Id));

        var opt = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
        };

        var itemString = JsonSerializer.Serialize(schedule, opt);
        var result = JsonSerializer.Deserialize<Item>(itemString, opt);
        return result != null ? await Task.FromResult(result) : new Item();
    }
    public override async Task<ItemList> GetAllAsync(EmptyRequest request, ServerCallContext context)
    {
        var schedules = await _scheduleService.GetAllAsync();
        var response = new ItemList();

        var opt = new JsonSerializerOptions()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
        };

        var itemString = JsonSerializer.Serialize(schedules, opt);
        var items = JsonSerializer.Deserialize<List<Item>>(itemString, opt);
        response.Items.AddRange(items);

        return await Task.FromResult(response);
    }
    public override async Task<ActionResult> CreateAsync(Item request, ServerCallContext context)
    {
        try
        {
            var opt = new JsonSerializerOptions()
            {
                ReferenceHandler = ReferenceHandler.IgnoreCycles,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            };

            var itemString = JsonSerializer.Serialize(request, opt);
            var item = JsonSerializer.Deserialize<Schedule>(itemString, opt);

            var result = await _scheduleService.CreateAsync(item);
            return await Task.FromResult(new ActionResult
            {
                Status = result,
                Message = result > 0 ? "Create Success" : "Create Failed",
                Data = new ItemList()
                {
                    Items = { request }
                }
            });
        }
        catch (Exception ex)
        {
            return new ActionResult { Status = 0, Message = "Create Failed" };
        }
    }
    public override async Task<ActionResult> UpdateAsync(Item request, ServerCallContext context)
    {
        try
        {
            var opt = new JsonSerializerOptions()
            {
                ReferenceHandler = ReferenceHandler.IgnoreCycles,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            };

            var itemString = JsonSerializer.Serialize(request, opt);
            var item = JsonSerializer.Deserialize<Schedule>(itemString, opt);

            var result = await _scheduleService.UpdateAsync(item);
            return await Task.FromResult(new ActionResult
            {
                Status = result,
                Message = result > 0 ? "Update Success" : "Update Failed",
                Data = new ItemList()
                {
                    Items = { request }
                }
            });
        }
        catch (Exception ex)
        {
            return new ActionResult { Status = 0, Message = "Update Failed" };
        }
    }
    public override async Task<ActionResult> RemoveAsync(IdRequest request, ServerCallContext context)
    {
        try
        {
            var result = await _scheduleService.RemoveAsync(Guid.Parse(request.Id));
            return await Task.FromResult(new ActionResult
            {
                Status = result ? 1 : 0,
                Message = result ? "Remove Success" : "Remove Failed"
            });
        }
        catch (Exception ex)
        {
            return new ActionResult { Status = 0, Message = "Remove Failed" };
        }
    }
}

---------------------------------Client----------------------------------------------------
Copy Protos từ grpc services bỏ vào
Đổi namespace Client
Project: proto -> Client
Build

Program:
Console.WriteLine("Hello, Welcome to gRPC Client!");
// The port number must match the port of the gRPC server.
using var channel = GrpcChannel.ForAddress("https://localhost:7264");
var client = new ScheduleGrpc.ScheduleGrpcClient(channel);

var schedules = client.GetAllAsync(new EmptyRequest());
Console.WriteLine("Schedules: ");
foreach (var item in schedules.Items)
{
    Console.WriteLine($"ID: {item.Id}");
    Console.WriteLine($"UserID: {item.UserId}");
    Console.WriteLine($"WorkDate: {item.WorkDate}");
    Console.WriteLine($"Status: {item.Status}");
    Console.WriteLine($"CreatedAt: {item.CreatedAt}");
    Console.WriteLine($"UpdatedAt: {item.UpdatedAt}");
    Console.WriteLine($"Title: {item.Title}");
    Console.WriteLine($"Description: {item.Description}");
    Console.WriteLine($"Location: {item.Location}");
    Console.WriteLine($"Notes: {item.Notes}");
    Console.WriteLine();
}

Console.WriteLine("Find by Id.");
var getById = Console.ReadLine();
if (!string.IsNullOrEmpty(getById))
{
    var idRequest = new IdRequest { Id = getById };
    var schedule = client.GetByIdAsync(idRequest);
    Console.WriteLine($"ID: {schedule.Id}");
    Console.WriteLine($"UserID: {schedule.UserId}");
    Console.WriteLine($"WorkDate: {schedule.WorkDate}");
    Console.WriteLine($"Status: {schedule.Status}");
    Console.WriteLine($"CreatedAt: {schedule.CreatedAt}");
    Console.WriteLine($"UpdatedAt: {schedule.UpdatedAt}");
    Console.WriteLine($"Title: {schedule.Title}");
    Console.WriteLine($"Description: {schedule.Description}");
    Console.WriteLine($"Location: {schedule.Location}");
    Console.WriteLine($"Notes: {schedule.Notes}");
    Console.WriteLine();
}

Console.WriteLine("Create a new schedule.");
var newId = Console.ReadLine();
var newUserId = Console.ReadLine();
var newWorkDate = Console.ReadLine();
var newStatus = Console.ReadLine();
var newCreatedAt = Console.ReadLine();
var newUpdatedAt = Console.ReadLine();
var newTitle = Console.ReadLine();
var newDescription = Console.ReadLine();
var newLocation = Console.ReadLine();
var newNotes = Console.ReadLine();
var newSchedule = new Item
{
    Id = newId,
    UserId = newUserId,
    WorkDate = newWorkDate,
    Status = newStatus,
    CreatedAt = newCreatedAt,
    UpdatedAt = newUpdatedAt,
    Title = newTitle,
    Description = newDescription,
    Location = newLocation,
    Notes = newNotes
};
var result = client.CreateAsync(newSchedule);
Console.WriteLine($"Create result: {result.Status}");
Console.WriteLine($"Message: {result.Message}");
Console.WriteLine();

Console.WriteLine("Update a schedule.");
var updateId = Console.ReadLine();
var updateUserId = Console.ReadLine();
var updateWorkDate = Console.ReadLine();
var updateStatus = Console.ReadLine();
var updateCreatedAt = Console.ReadLine();
var updateUpdatedAt = Console.ReadLine();
var updateTitle = Console.ReadLine();
var updateDescription = Console.ReadLine();
var updateLocation = Console.ReadLine();
var updateNotes = Console.ReadLine();
var updateSchedule = new Item
{
    Id = updateId,
    UserId = updateUserId,
    WorkDate = updateWorkDate,
    Status = updateStatus,
    CreatedAt = updateCreatedAt,
    UpdatedAt = updateUpdatedAt,
    Title = updateTitle,
    Description = updateDescription,
    Location = updateLocation,
    Notes = updateNotes
};
var updateResult = client.UpdateAsync(updateSchedule);
Console.WriteLine($"Update result: {updateResult.Status}");
Console.WriteLine($"Message: {updateResult.Message}");
Console.WriteLine();

Console.WriteLine("Delete a schedule.");
var deleteId = Console.ReadLine();
var deleteRequest = new IdRequest { Id = deleteId };
var deleteResult = client.RemoveAsync(deleteRequest);
Console.WriteLine($"Delete result: {deleteResult.Status}");
Console.WriteLine($"Message: {deleteResult.Message}");
Console.WriteLine();

Console.WriteLine("Press any key to exit...");
Console.ReadKey();
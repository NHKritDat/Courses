Tạo Blank Solution, đặt tên theo format: SP25_NET1720_RPR231_ASM4_SE170330_NguyenHoangDat

Tạo Project:
- Blazor Web Assembly: SCBS.GraphQLClient
- MVC WebApp: SCBS.MVCWebApp
- Web API: SCBS.GraphQLAPIServicesHotChocolate
- Class Library:
	- SCBS.Repositories
	- SCBS.Services

Xóa Class1

Open in Terminal Repo:
dotnet add package Microsoft.EntityFrameworkCore --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.5
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.5
dotnet add package Microsoft.Extensions.Configuration --version 8.0.0
dotnet add package Microsoft.Extensions.Configuration.Json --version 8.0.0

Open in Terminal WebApp:
dotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design --version 8.0.7
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.5

Open In Terminal API:
dotnet add package HotChocolate.AspNetCore
dotnet add package HotChocolate.Data

Add Project Reference
Services -> Repo
APIServices -> Services
WebApp -> Repo

Solution -> Config Startup -> Multiple -> API và WebApp và Blazor

--------------------------------Set up Repo-------------------------------------------------
Project -> EF Core -> Reverse Engineer
Add... -> Add Database Connection
Server Name: Krit-Dat\NHKRITDAT_MSSQL
SQL Server Authentication
Username: sa
Password: 123456
Encrypt: False
tick Trust Server Certificate
Select correct db

Select Connect
Select Table
Use DataAnnotation
Include connection string

Tạo folder DBContext
Chuyển Context vào folder trên
Đổi namespace DBContext
using Models

Comment OnConfiguring
Bỏ đoạn này vào:
public static string GetConnectionString(string connectionStringName)
{
    var config = new ConfigurationBuilder()
        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
        .AddJsonFile("appsettings.json")
        .Build();

    string connectionString = config.GetConnectionString(connectionStringName);
    return connectionString;
}

protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

Tạo folder Base
Tạo GenericRepository
Xóa bên trong và bỏ đoạn này vào:
public class GenericRepository<T> where T : class
{
    protected Sp25CosmeticsDBContext _context;

    public GenericRepository()
    {
        _context ??= new Sp25CosmeticsDBContext();
    }

    public GenericRepository(Sp25CosmeticsDBContext context)
    {
        _context = context;
    }

    public async Task<List<T>> GetAllAsync()
    {
        return await _context.Set<T>().ToListAsync();
    }

    public async Task<int> CreateAsync(T entity)
    {
        _context.Add(entity);
        return await _context.SaveChangesAsync();
    }

    public async Task<int> UpdateAsync(T entity)
    {
        var tracker = _context.Attach(entity);
        tracker.State = EntityState.Modified;
        return await _context.SaveChangesAsync();
    }

    public async Task<bool> RemoveAsync(T entity)
    {
        _context.Remove(entity);
        await _context.SaveChangesAsync();
        return true;
    }

    public async Task<T> GetByIdAsync(int id)
    {
        var entity = await _context.Set<T>().FindAsync(id);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }

    public async Task<T> GetByIdAsync(string code)
    {
        var entity = await _context.Set<T>().FindAsync(code);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }

    public async Task<T> GetByIdAsync(Guid code)
    {
        var entity = await _context.Set<T>().FindAsync(code);
        if (entity != null)
        {
            _context.Entry(entity).State = EntityState.Detached;
        }

        return entity;
    }
}

Tạo các class repo [Model]Repository : GenericRepository<Model> thêm public
Constructor rỗng: 
        public ModelRepository() { }

Hàm login:
        public async Task<Model> Get[Model](string [field], string password) => await _context.Model.FirstOrDefaultAsync(u => u.Field == [field đăng nhập bằng cái gì] && u.Password == password [&& u.IsActive đề có yêu cầu active hay không]);

Chức năng chính, kiểm tra id là kiểu gì, SubModel tên là gì:
        public async Task<List<Model>> GetAllAsync() => await _context.Models.Include(item => item.SubModel).ToListAsync();
        public async Task<Model> GetByIdAsync(type id)
        {
            var entity = await _context.Models.Include(item => item.SubModel).FirstOrDefaultAsync(item => item.Id == id);
            if (entity != null)
            {
                _context.Entry(entity).State = EntityState.Detached;
            }
            return entity;
        }
        public async Task<List<Model>> Search(type? search1, type? search2, type? search3) => await _context.Models
                .Include(item => item.SubModel)
                .Where(item =>
                (string.IsNullOrEmpty(search1) || item.search1.Contains(search1))
                            && (string.IsNullOrEmpty(search2) || item.search2.Contains(search2))
                            && (string.IsNullOrEmpty(search3) || item.search3.Contains(search3))
                )
                .ToListAsync();

------------------------------------------------Services----------------------------------------------
Tạo các class [Model]Service và xóa nội dung bên trong
    public interface IModelService
    {
    }
    public class ModelService : IModelService
    {
        private readonly ModelRepository _modelRepository;
        public ModelService() => _modelRepository = new ModelRepository();
    }

Hàm login:
        public async Task<Model> Authenticate(type field, string password) => await _modelRepository.GetModel(field, password);
Cho lên interface

Hàm chính:
        public async Task<int> CreateAsync(Model item) => await _modelRepository.CreateAsync(item);

        public async Task<bool> RemoveAsync(type id)
        {
            var item = await _modelRepository.GetByIdAsync(id);
            if (item != null)
            {
                return await _modelRepository.RemoveAsync(item);
            }
            return false;
        }

        public async Task<List<Model>> GetAllAsync() => await _modelRepository.GetAllAsync();

        public async Task<Model> GetByIdAsync(type id) => await _modelRepository.GetByIdAsync(id);

        public async Task<List<Model>> Search() => await _modelRepository.Search();

        public async Task<int> UpdateAsync(Model item) => await _modelRepository.UpdateAsync(item);
Cho lên interface đủ 6 hàm, điều chỉnh Search giống repo

Hàm phụ:
        public async Task<List<Model>> GetAllAsync() => await _modelRepository.GetAllAsync();

        public async Task<Model> GetByIdAsync(type id) => await _modelRepository.GetByIdAsync(id);
Cho lên interface đủ 2 hàm

---------------------------------------------API-------------------------------------------------
Tạo folder GraphQLs
add class Query
        private readonly IScheduleService _scheduleService;
        private readonly IUserService _userService;

        public Query(IScheduleService scheduleService, IUserService userService)
        {
            _scheduleService = scheduleService;
            _userService = userService;
        }

        public async Task<List<Schedule>> GetAllSchedulesAsync()
        {
            try
            {
                var result = await _scheduleService.GetAllAsync();
                return result;
            }
            catch (Exception ex)
            {
                return new List<Schedule>();
            }
        }
        public async Task<Schedule> GetByIdScheduleAsync(Guid id)
        {
            try
            {
                var result = await _scheduleService.GetByIdAsync(id);
                return result;
            }
            catch (Exception ex)
            {
                return new Schedule();
            }
        }
        public async Task<List<Schedule>> SearchSchedules(string? title, string? location, string? status)
        {
            try
            {
                var result = await _scheduleService.Search(title, location, status);
                return result;
            }
            catch (Exception ex)
            {
                return new List<Schedule>();
            }
        }
        public async Task<List<User>> GetAllUsersAsync()
        {
            try
            {
                var result = await _userService.GetAllAsync();
                return result;
            }
            catch (Exception ex)
            {
                return new List<User>();
            }
        }
        public async Task<User> GetByIdUserAsync(Guid id)
        {
            try
            {
                var result = await _userService.GetByIdAsync(id);
                return result;
            }
            catch (Exception ex)
            {
                return new User();
            }
        }

Taoj Mutation:
        private readonly IScheduleService _scheduleService;
        private readonly IUserService _userService;

        public Mutation(IScheduleService scheduleService, IUserService userService)
        {
            _scheduleService = scheduleService;
            _userService = userService;
        }
        public async Task<int> CreateScheduleAsync(Schedule item)
        {
            try
            {
                item.User = await _userService.GetByIdAsync(item.UserId);
                var result = await _scheduleService.CreateAsync(item);
                return result;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public async Task<int> UpdateScheduleAsync(Schedule item)
        {
            try
            {
                item.User = await _userService.GetByIdAsync(item.UserId);
                var result = await _scheduleService.UpdateAsync(item);
                return result;
            }
            catch (Exception ex)
            {
                return 0;
            }
        }
        public async Task<bool> RemoveScheduleAsync(Guid id)
        {
            try
            {
                var result = await _scheduleService.RemoveAsync(id);
                return result;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

Add vô program:
builder.Services.AddScoped<IScheduleService, ScheduleService>();
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddGraphQLServer().AddQueryType<Query>().BindRuntimeType<DateTime, DateTimeType>();
builder.Services.AddGraphQLServer().AddMutationType<Mutation>().BindRuntimeType<DateTime,DateTimeType>();
builder.Services.AddControllers().AddJsonOptions(options =>
{
    options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
    options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.Never;
});
app.UseCors(options => options.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
app.UseRouting().UseEndpoints(endpoints => { endpoints.MapGraphQL(); });

chạy thay url swagger/... bằng graphql

-------------------------------------------Web App-----------------------------------------
Add MVC Controller with views, using entity framework

-------------------------------------------Blazor------------------------------------------
Tạo folder Models
Cope Models bên repo bỏ vào
Đổi namespace

Tạo folder GraphQL
Tạo class GraphQLConsumer

Copy SchedulePages từ ASM3 bỏ vào, đổi namespace

Programs:
builder.Services.AddScoped<GraphQLConsumer>();

Open in Terminal:
dotnet add package Graphql
dotnet add package GraphQL.Client
dotnet add package GraphQL.Client.Serializer.Newtonsoft
dotnet add package GraphQL.Client.Http